library(dada2)
install.packages("dada2")
install.packages("ShortRead")
install.packages("Biostrings")
library(dada2)
install.packages('devtools')
library(devtools)
install.packages('devtools', repos='http://cran.rstudio.com/')
library(updateR)
update.packages(checkBuilt=TRUE)
y
install.packages(c("callr", "cli", "cluster", "dendextend", "dplyr", "farver", "forcats", "foreign", "gganimate", "ggplot2", "gtools", "hms", "htmltools", "httpuv", "igraph", "jsonlite", "lifecycle", "lme4", "maptools", "MASS", "Matrix", "MatrixModels", "mnormt", "nlme", "nloptr", "nnet", "openssl", "pillar", "pkgload", "processx", "ps", "qap", "quantreg", "Rcpp", "RcppEigen", "readxl", "rlang", "RSQLite", "scales", "seriation", "sp", "statmod", "stringi", "survival", "testthat", "tibble", "tidyr", "TSP", "tweenr", "vctrs", "vegan", "XML", "zip", "zoo"))
install.packages(c("callr", "cli", "cluster", "dendextend", "dplyr", "farver", "forcats", "foreign", "gganimate", "ggplot2", "gtools", "hms", "htmltools", "httpuv", "igraph", "jsonlite", "lifecycle", "lme4", "maptools", "MASS", "Matrix", "MatrixModels", "mnormt", "nlme", "nloptr", "nnet", "openssl", "pillar", "pkgload", "processx", "ps", "qap", "quantreg", "Rcpp", "RcppEigen", "readxl", "rlang", "RSQLite", "scales", "seriation", "sp", "statmod", "stringi", "survival", "testthat", "tibble", "tidyr", "TSP", "tweenr", "vctrs", "vegan", "XML", "zip", "zoo"))
r version
version
install.packages(dada2)
install.packages("dada2")
install.packages("~/github/dada2",
repos = NULL,
type = "source",
dependencies = c("Depends", "Suggests","Imports"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.10")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.15")
library(dada2); packageVersion("dada2")
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
path <- "/Users/winnythoen/Library/CloudStorage/GoogleDrive-winnywinbin@gmail.com/.shortcut-targets-by-id/1E5lAF2Q142BBy6yXw-NM1VRV6_5N3le3/21022-375801_ARISE_Soil_Pilot/BaseClear/145561_21022_NovaseqSoilMetabarcoding _nafiesa/raw_sequences"
list.files(path)
path <- "/Users/winnythoen/Library/CloudStorage/GoogleDrive-winnywinbin@gmail.com/.shortcut-targets-by-id/1E5lAF2Q142BBy6yXw-NM1VRV6_5N3le3/21022-375801_ARISE_Soil_Pilot/BaseClear/145561_21022_NovaseqSoilMetabarcoding _nafiesa/raw_sequences"
list.files(path)
help(package="dada2")
library(dada2); packageVersion("dada2")
plotQualityProfile(path[1:2])
plotQualityProfile(path[1])
plotQualityProfile(path[1:2])
is.recursive(path)
is.atomic(path)
plotQualityProfile(path, 1:2)
plotQualityProfile(path, [1:2])
plotQualityProfile(path[1:2])
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
path <- "/Users/winnythoen/Desktop/BioInformatica/Afstuderen/TestData"
list.files(path)
fnFs <- sort(list.files(path, pattern = "_R1_", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2_", full.names = TRUE))
cutadapt <- "/Users/winnythoen/opt/anaconda3/bin/cutadapt"
system2(cutadapt, args = "--version")
FWD1 <- "CTAGACTCGTCATCGATGAAGAACGCAG"
FWD2 <- "CTAGACTCGTCAACGATGAAGAACGCAG"
FWD3 <- "CTAGACTCGTCACCGATGAAGAACGCAG"
FWD4 <- "CTAGACTCGTCATCGATGAAGAACGTAG"
FWD5 <- "CTAGACTCGTCATCGATGAAGAACGTGG"
allOrients <- function(primer) {
require(Biostrings)
dna <- DNAString(primer)
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))
}
FWD1.orients <- allOrients(FWD1)
FWD2.orients <- allOrients(FWD2)
FWD3.orients <- allOrients(FWD3)
FWD4.orients <- allOrients(FWD4)
FWD5.orients <- allOrients(FWD5)
FWD1.orients
fnFs.filtN <- file.path(path, "filtN", basename(fnFs))
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
primerHits <- function(primer, fn) {
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD1.ForwardReads = sapply(FWD1.orients, primerHits, fn = fnFs[1]))
rbind(FWD1.ForwardReads = sapply(FWD1.orients, primerHits, fn = fnFs[[1]]))
